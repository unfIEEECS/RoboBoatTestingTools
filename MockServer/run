#!/usr/bin/env python
# main.py

from flask import Flask, url_for, request, Response
from flask_classy import FlaskView, route
from restValidations import RoboBoatValidator

import string, shutil, random, re, uuid

class RoboSubRestApiView(FlaskView):
	def __init__(self):
		self.runStarted = False
	#Obstacle Avoidance Appendix 4	
	@route("/obstacleAvoidance/<courseName>/<teamCode>",methods=['GET'])
	def obstacleAvoidance(self,courseName,teamCode):
		#Validation
		if(not RoboBoatValidator.validateCourse(courseName) and not RoboBoatValidator.validateTeamCode(teamCode)):
    			return Response("Cannot find the course or team", status=404)
		#Response
		js = "{\"gateCode\":\"("+str(random.choice(RoboBoatValidator.entrances))+\
			","+str(random.choice(RoboBoatValidator.exits))+")\"}"
		resp = Response(js, status=200, mimetype='application/json')
		return resp

	#Automated Docking Appendix 5	
	@route("/automatedDocking/<courseName>/<teamCode>",methods=['GET'])
	def automatedDocking(self,courseName,teamCode):
		#Validation
		if(not RoboBoatValidator.validateCourse(courseName) and not RoboBoatValidator.validateTeamCode(teamCode)):
    			return Response("Cannot find the course or team", status=404)
		#Response
		option1="{\"symbol\":\""+random.choice(RoboBoatValidator.shapes)+\
			"\",\"color\":\""+random.choice(RoboBoatValidator.dockColors)+"\"}"
		option2="{\"symbol\":\""+random.choice(RoboBoatValidator.shapes)+\
			"\",\"color\":\""+random.choice(RoboBoatValidator.dockColors)+"\"}"
		js = "{\"dockingBaySequence\":["+option1+","+option2+"]}"
		resp = Response(js, status=200, mimetype='application/json')
		return resp

	#Interop Challenge Appendix 6
	@route("/interop/image/<courseName>/<teamCode>",methods=['POST'])
	def imageUpload(self,courseName,teamCode):
    	#Validation
		if(not RoboBoatValidator.validateCourse(courseName) and not RoboBoatValidator.validateTeamCode(teamCode)):
			return Response("Cannot find the course or team", status=404)
		if(len(request.files) < 1 and request.files["image".mimetype]):
			return Response("Your request is malformed",status=400)
		#Append Image to savedImages folder
		print(str(request.files))
		genId = uuid.uuid1()
		print(str(genId))
		with open('savedImages/'+str(genId), 'wb') as f:
			shutil.copyfileobj(request.files['image'].stream, f)
		RoboBoatValidator.addImageId(str(genId))
		#Response
		js = "{\"id\":\""+str(genId)+"\"}"
		resp = Response(js, status=200, mimetype='application/json')
		return resp
	
	@route("/interop/report/<courseName>/<teamCode>",methods=['POST'])
	def shapeReport(self,courseName,teamCode):
		#Validation
		if(not RoboBoatValidator.validateCourse(courseName) and not RoboBoatValidator.validateTeamCode(teamCode)):
			return Response("Cannot find the course or team", status=400)
		print(request.json)
		if(request.get_json(silent=True) is not None):
			data = request.get_json(silent=True)
			if(not RoboBoatValidator.validateCourse(data['course']) and not RoboBoatValidator.validateTeamCode(data['team'])):
				return Response("Cannot find the course or team", status=400)
			if(not RoboBoatValidator.validateShape(data['shape'])):
				return Response("Not valid symbol",status=400)
			if(not RoboBoatValidator.validateImageId(data['image'])):
				return Response("Not valid image id try again",status=400)
			#Response
			js = "{\"success\":true}"
			resp = Response(js, status=200, mimetype='application/json')
			return resp
		else:
			return Response("Your request is malformed",status=400)
	#Pinger Location Appendix 8
	#Run Appendix 10
	@route("/run/start/<courseName>/<teamCode>",methods=['POST'])
	def runStart(self,courseName,teamCode):
		if(not self.runStarted):
			self.runStarted = True
		#Validation
		if(not RoboBoatValidator.validateCourse(courseName) and not RoboBoatValidator.validateTeamCode(teamCode)):
    			return Response("Cannot find the course or team", status=404)
		#Response
		js = "{\"success\":true}"
		resp = Response(js, status=200, mimetype='application/json')
		return resp
	@route("/run/end/<courseName>/<teamCode>",methods=['POST'])
	def runEnd(self,courseName,teamCode):
		if(self.runStarted):
			self.runStarted = False
		#Validation
		if(not RoboBoatValidator.validateCourse(courseName) and not RoboBoatValidator.validateTeamCode(teamCode)):
    			return Response("Cannot find the course or team", status=404)
		#Response
		js = "{\"success\":true}"
		resp = Response(js, status=200, mimetype='application/json')
		return resp
	#Heartbeat Appendix 9
	@route("/heartbeat/<courseName>/<teamCode>",methods=['POST'])
	def heartbeat(self,courseName,teamCode):
		content = request.json
		challanges = ["gates","obstacles","docking","pinger","interop","return"]
		js = "{\"success\":true}"
		resp = Response(js, status=200, mimetype='application/json')
		if(content["challenge"] not in challanges):
			resp = Response(js, status=400, mimetype='application/json')
		return resp
	#Other
	@route("",methods=['GET'])
	def index(self):
		js = "[\"Welcome To Hawk Test Server.\"]"
		resp = Response(js, status=200, mimetype='application/json')
		return resp
	
app = Flask(__name__)

RoboSubRestApiView.register(app, route_base='/', subdomain='')

if __name__ == "__main__":
    app.run()

